commit 9d7ce8d42b80fda2566c70f0d4de4069bb34e72c
Author: Richard Levitte <levitte@openssl.org>
Date:   Thu Nov 10 01:49:47 2016 +0100

    Fix no-cms (CVE-2016-7053)
    
    Reviewed-by: Matt Caswell <matt@openssl.org>

diff --git a/test/recipes/25-test_d2i.t b/test/recipes/25-test_d2i.t
index e663534c4d..688c8ed7ac 100644
--- a/test/recipes/25-test_d2i.t
+++ b/test/recipes/25-test_d2i.t
@@ -12,6 +12,7 @@ use warnings;
 
 use File::Spec;
 use OpenSSL::Test qw/:DEFAULT srctop_file/;
+use OpenSSL::Test::Utils;
 
 setup("test_d2i");
 
@@ -80,9 +81,13 @@ ok(run(test(["d2i_test", "ASN1_INTEGER", "decode",
              srctop_file('test','d2i-tests','bad-int-padminus1.der')])),
    "Running d2i_test bad-int-padminus1.der INTEGER");
 
-# Invalid CMS structure with decode error in CHOICE value.
-# Test for CVE-2016-7053
+SKIP: {
+  skip "No CMS support in this configuration", 1 if disabled("cms");
 
-ok(run(test(["d2i_test", "CMS_ContentInfo", "decode",
-             srctop_file('test','d2i-tests','bad-cms.der')])),
-   "Running d2i_test bad-cms.der CMS ContentInfo");
+  # Invalid CMS structure with decode error in CHOICE value.
+  # Test for CVE-2016-7053
+
+  ok(run(test(["d2i_test", "CMS_ContentInfo", "decode",
+               srctop_file('test','d2i-tests','bad-cms.der')])),
+     "Running d2i_test bad-cms.der CMS ContentInfo");
+}

commit a378a46985698bf2576b2990e7faf21f62dd176a
Author: Dr. Stephen Henson <steve@openssl.org>
Date:   Fri Oct 14 12:02:12 2016 +0100

    add test for CVE-2016-7053
    
    Reviewed-by: Richard Levitte <levitte@openssl.org>

diff --git a/test/d2i-tests/bad-cms.der b/test/d2i-tests/bad-cms.der
new file mode 100644
index 0000000000..19cd3cc3f2
Binary files /dev/null and b/test/d2i-tests/bad-cms.der differ
diff --git a/test/recipes/25-test_d2i.t b/test/recipes/25-test_d2i.t
index 9db0b2be45..e663534c4d 100644
--- a/test/recipes/25-test_d2i.t
+++ b/test/recipes/25-test_d2i.t
@@ -15,7 +15,7 @@ use OpenSSL::Test qw/:DEFAULT srctop_file/;
 
 setup("test_d2i");
 
-plan tests => 13;
+plan tests => 14;
 
 ok(run(test(["d2i_test", "X509", "decode",
              srctop_file('test','d2i-tests','bad_cert.der')])),
@@ -79,3 +79,10 @@ ok(run(test(["d2i_test", "ASN1_INTEGER", "decode",
 ok(run(test(["d2i_test", "ASN1_INTEGER", "decode",
              srctop_file('test','d2i-tests','bad-int-padminus1.der')])),
    "Running d2i_test bad-int-padminus1.der INTEGER");
+
+# Invalid CMS structure with decode error in CHOICE value.
+# Test for CVE-2016-7053
+
+ok(run(test(["d2i_test", "CMS_ContentInfo", "decode",
+             srctop_file('test','d2i-tests','bad-cms.der')])),
+   "Running d2i_test bad-cms.der CMS ContentInfo");

commit f962541d0be200055e508641ddf3a8ec8819e4df
Author: Dr. Stephen Henson <steve@openssl.org>
Date:   Fri Oct 14 11:51:43 2016 +0100

    Don't set choice selector on parse failure.
    
    Don't set choice selector on parse failure: this can pass unexpected
    values to the choice callback. Instead free up partial structure
    directly.
    
    CVE-2016-7053
    
    Thanks to Tyler Nighswander of ForAllSecure for reporting this issue.
    
    Reviewed-by: Richard Levitte <levitte@openssl.org>

diff --git a/crypto/asn1/tasn_dec.c b/crypto/asn1/tasn_dec.c
index 679a50dce5..c9b637516e 100644
--- a/crypto/asn1/tasn_dec.c
+++ b/crypto/asn1/tasn_dec.c
@@ -225,16 +225,14 @@ static int asn1_item_embed_d2i(ASN1_VALUE **pval, const unsigned char **in,
             /* If field not present, try the next one */
             if (ret == -1)
                 continue;
-            /*
-             * Set the choice selector here to ensure that the value is
-             * correctly freed upon error. It may be partially initialized
-             * even if parsing failed.
-             */
-            asn1_set_choice_selector(pval, i, it);
             /* If positive return, read OK, break loop */
             if (ret > 0)
                 break;
-            /* Otherwise must be an ASN1 parsing error */
+            /*
+             * Must be an ASN1 parsing error.
+             * Free up any partial choice value
+             */
+            asn1_template_free(pchptr, tt);
             errtt = tt;
             ASN1err(ASN1_F_ASN1_ITEM_EMBED_D2I, ERR_R_NESTED_ASN1_ERROR);
             goto err;
@@ -252,6 +250,8 @@ static int asn1_item_embed_d2i(ASN1_VALUE **pval, const unsigned char **in,
             goto err;
         }
 
+        asn1_set_choice_selector(pval, i, it);
+
         if (asn1_cb && !asn1_cb(ASN1_OP_D2I_POST, pval, it, NULL))
             goto auxerr;
         *in = p;
